<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>stderr</title><link href="https://nekopy.github.io/" rel="alternate"></link><link href="https://nekopy.github.io/feeds/all.atom.xml" rel="self"></link><id>https://nekopy.github.io/</id><updated>2017-06-10T00:30:00-07:00</updated><entry><title>Soundcloud Liberator</title><link href="https://nekopy.github.io/soundcloud-liberator.html" rel="alternate"></link><published>2017-06-10T00:30:00-07:00</published><author><name>neko.py</name></author><id>tag:nekopy.github.io,2017-06-10:soundcloud-liberator.html</id><summary type="html">&lt;p&gt;Hi folks. It's been quite a while since I last wrote a blog post, huh? Well, I've been busy with various projects at home and at work, so cut me some slack. To make it up to you, I've got a treat. &lt;a href="https://nekopy.github.io/assets/plugins/soundcloud_liberator-1.0-an+fx.xpi"&gt;The Soundcloud Liberator browser extension for Firefox&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The source is &lt;a href="https://github.com/nekopy/soundcloud-liberator"&gt;available here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Usage &amp;amp; Rationale&lt;/h1&gt;
&lt;p&gt;This Firefox browser plugin allows you to download any track off of soundcloud, regardless of whether the download link is available. The usage is simple. You install the browser plugin, then visit any sound page on soundcloud (as in, the page for a single song). Once you're there, click the new FREE icon in your browser, and it'll open a tab that lets you download the track by saving it with your browser. It doesn't support downloading playlists right now. This browser plugin arose out of my frustration with soundcloud tracks that are uploaded under a Creative Commons license, but had no download link. If a track is Creative Commons, it's meant to be shared, right? I feel like by restricting download of tracks like that, it's against the spirit of the license. This was particularly annoying when I was specifically looking for CC content to use in other projects, and I'd find something great, only for there to be no download link. What's even more annoying is that unless you have some kind of pro account on soundcloud, downloads will be capped after a certain number, so even if a user intended for a song to be universally available, the download might be disabled just because the track had too many downloads already.&lt;/p&gt;
&lt;h1&gt;Development&lt;/h1&gt;
&lt;p&gt;At first, I had assumed that I'd be able to just look at the network traffic and grab my MP3 and be done with it. In fact, I vaguely remember being able to do this in the past. So I pulled up the network inspector in firefox, filtered it to media files and hit play. What I found was something else entirely. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Several Network Requests" src="https://nekopy.github.io/assets/images/network-mess.png" /&gt;&lt;/p&gt;
&lt;p&gt;It seems that for some reason, soundcloud splits a file into segments. There's a couple different reasons this might be. For one, this might allow us to do parallelized download. Additionally, this might allow load balancing, or letting really really hot songs be spread across servers. If you picked any one of these URLs out, you could pull it up in a tab, but it'd only be a segment of the song. Let's take a look at one of the actual MP3 urls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://cf-hls-media.sndcdn.com/media/3352449/3512109/hbsslqcaoE4T.128.mp3?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiKjovL2NmLWhscy1tZWRpYS5zbmRjZG4uY29tL21lZGlhLyovKi9oYnNzbHFjYW9FNFQuMTI4Lm1wMyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTQ5NjQ3NzYwN319fV19&amp;amp;Signature=h8BFZrBB1CHlEss~JTosvMS7alBB7awLVg-O64B~jljrCLdm1wERXceivavohPn42gzDdS9tCCmRovoPma5y6GZ0WqW5QaXUEQAfi-EYSMhtVuIyGgZTZ4h45GweXCpBxtGmzTILao1qj5Xe9n3OgWplYQFeVNFSTOXoxsa8gkRMf~LUddB9qPbQVxMBS8E1cZHQT5bADaYab8mXaRTkNfJAWB6dt7fqynZVKXkqK5Gsa7CoRon08JG2GtvkJt4EXLiOUESgGZtbFe6Ev6eLC0xz6vqu-Vw5DWyax~pMMe2QDqYGvrvWPx3AgH4-0zn2fpeuG2QCkLyrm6V5TjlXzQ__&amp;amp;Key-Pair-Id=APKAJAGZ7VMH2PFPW6UQ
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wow that is &lt;em&gt;ugly&lt;/em&gt;. Tons of huge CGI nonsense makes this a fairly intimidating URL to look at. However, I quickly noticed a pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://cf-hls-media.sndcdn.com/media/3033128/3192788/hbsslqcaoE4T.128.mp3?Po...
https://cf-hls-media.sndcdn.com/media/3192789/3352448/hbsslqcaoE4T.128.mp3?P...
https://cf-hls-media.sndcdn.com/media/3352449/3512109/hbsslqcaoE4T.128.mp3?Polic...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the media path, there's two numbers, and the number before is always less than the number after, and across URLs in the network log, they're monotonically increasing. Aha! So these aren't some random numbers. They are in fact some kind of units of time. Maybe seconds or samples. So what would happen if we found the URL with the highest ending sample, and replaced its start sample with 0? Like so...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://cf-hls-media.sndcdn.com/media/0/3512109/hbsslqcaoE4T.128.mp3?Polic...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well I tried it, and lo and behold, we got ourselves the full track, start to finish. What must be going on here is that the server will somehow split up the tracks on request, and serve it back. This doesn't rule out load balancing going on. There are probably replicas with all the data around. Or it could just be some mechanism to stop people from just grabbing the track outright. This totally sucks though. If I want to download a track, I gotta pull up my network view, seek to the end of the track to trigger the last song segment to download, and then patch the URL up. At this poit, I decided it would be a fun exercise to instead make myself a browser plugin to do it for me.&lt;/p&gt;
&lt;p&gt;The first step was to identify how to make a browser plugin. I'm a firefox user, so I immediately went to the Firefox reference, and found &lt;a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Intercept_HTTP_requests"&gt;this tutorial&lt;/a&gt; which covers how to hook HTTP requests and investigate their content. From there, I was able to build a listener for the browser.webRequest.onCompleted event, which I use in my final product. &lt;/p&gt;
&lt;p&gt;The initial idea was to grab each of these ones, find the highest, and associate it with a normal track ID, so i could make sure the request belonged to the page I was visiting. I must admit, I never looked into whether there's separate instances of my listener running for each tab or not, and how the script behaved when the URL you're visiting changes, so instead i use an associative map of track IDs (actually it's mp3 filename, but I'll get into that later) to download links, and when you click on the button, it looks up the track ID in the map to see if the download link is available. The code itself to accomplish this is mostly string manipulation. It isn't particularly interesting. However, in order to index into that map, I need to get the track ID from the current URL. To do this, I need a soundcloud API token. However, the browser accomplishes these calls, and certainly it doesn't have an API token right? &lt;/p&gt;
&lt;p&gt;Well in fact you can just take the token that the browser is using and substitute it in for a developer token. To facilitate this, i use my getClientId to pull it out of the CGI parameters. Very simple.&lt;/p&gt;
&lt;p&gt;An issue quickly manifested itself, in that in order for me to get the highest sample number, the browser needs to make a request for it first. This was lousy, because it meant that in my initial version, the user needed to click on the end of the track in order to trigger the download. However, I found that the full list of audio segments is available in the form of an M3U playlist file that's downloaded by the browser when you visit a page. What's even better is that M3U is a text-based format. You'll see that in my final code, there is no longer any hooks to listen for the HTTP requests for individual songs. Instead, I simply listen for the M3U and parse out the last track, which, being in chronological order, will always have the highest sample in it.&lt;/p&gt;
&lt;p&gt;However, there's one last issue. When we read our M3U file and get the MP3's, we have no way of getting the track ID from the MP3 url, since it has no info like that in it. So we must save the files into our map just by the filename. But there's no way exposed in the public API to go either from an MP3 filename to a track ID or vice-versa. I seemed to be SOL after quite a bit of work... However, after reading through the HTTP requests that are made, I found an interesting API call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/tracks/{trackID}/streams
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This appeared to do exactly what I wanted it to: resolve the URL to the actual mp3 name. However, to request that MP3 file, we still need some magical CGI tokens on the end, so I wasnt able to just use this for anything, however that could be a possibility if I was able to cache the policy token stuff at the end of the files. In fact, using the policy token stuff did work. Apparently it's valid long enough for me to reuse it later. I don't know how long it expires, and eventually it will likely leave my cache stale, for which the liberator currently has no resolution. You have to just refresh the page. &lt;/p&gt;
&lt;p&gt;This magic sauce is used in my resolveStreamInfo function which is used in the process of going from a track ID to a URL, which allows me to index into my map.&lt;/p&gt;
&lt;p&gt;The rest of the code is fairly straightforward. We just wait for the user to click the button, and if they're on a soundcloud song page we try a lookup in our map, and spawn a tab with the full-length mp3 in it.&lt;/p&gt;
&lt;p&gt;That's the long and short of it. I've used the plugin several times now, and it's integrated into my full browser. Hope you enjoy.&lt;/p&gt;</summary><category term="soundcloud liberator"></category><category term="browser extension"></category><category term="javascript"></category><category term="mp3"></category><category term="soundcloud"></category><category term="m3u"></category><category term="firefox"></category></entry><entry><title>LUKS vs eCryptfs</title><link href="https://nekopy.github.io/luks.html" rel="alternate"></link><published>2017-03-15T20:59:40-07:00</published><author><name>neko.py</name></author><id>tag:nekopy.github.io,2017-03-15:luks.html</id><summary type="html">&lt;p&gt;Last week, I talked about setting up eCryptfs. I've been happily running it since. However, some of the major disadvantages of the system cropped up very quickly. The major issue I had was that even with eCryptfs I still had some more private documents that I didn't feel comfortable having decrypted whenever I'm logged into the laptop. &lt;/p&gt;
&lt;p&gt;Instead, I grabbed my large external harddrive and made a standard encrypted partion. I selected LUKS + ext4.  The major difference between LUKS and eCryptfs is that eCryptfs files are encrypted on their own, whereas LUKS crypto is applied to the entire partition. This is good and bad. eCryptfs likens themselves to PGP in this way, since the files have everything they need to be decrypted separately. So apparently you could migrate files from one machine to the other without them needing to be encrypted for transport.&lt;/p&gt;
&lt;p&gt;Creating the encrypted partition was dead simple. The GNOME disk utility got me all set up making the partition. Then I just followed the long, slow process of migrating files. However, USB 3.0 made things move pretty quickly...&lt;/p&gt;
&lt;p&gt;Now, I can access the disk only when I want to, decrypting it when I need it rather than all the time.&lt;/p&gt;
&lt;p&gt;My next major interest was identifying how the cipher strength of default LUKS compares with default eCryptfs. So I went off to investigate how to figure out what kind of crypto was being used by each.&lt;/p&gt;
&lt;p&gt;I used some fairly different commands for each. First, let's look at LUKS. Obviously, first make sure you've decrypted your disk.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsblk -f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is going to give you information about the block devices on the system. Importantly, it'll give you the ID of the LUKS partition. We need this in order to query cryptsetup for information about LUKS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cryptsetup status &amp;lt;id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this, I'm able to see that my LUKS partition is using AES with a 256-bit key size. That's pretty good. It's FIPS 140-2 compliant, which is pretty good if you trust the NSA. Now how about eCryptfs?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This shows us all the info we need. Much less work... We can see from the mount attributes that we're also using AES. And the key size is 16 &lt;em&gt;bytes&lt;/em&gt;, or 128 bits. So that's AES 128. Not too shabby, but could be better. Initially I misread the keysize as 16 &lt;em&gt;bits&lt;/em&gt; and I was kind of terrified for a moment. &lt;/p&gt;
&lt;p&gt;So, you get better encryption with LUKS, &lt;em&gt;and&lt;/em&gt; better performance, I believe. When I was moving my stuff into my eCryptfs folder it brought the entire system to a crawl. And since it's going on in the kernel, I couldnt even set a nice value or tune it or anything. Yuck. However I didnt have that issue when moving files to LUKS for some reason, despite it needing to still encrypt the data on the fly. &lt;/p&gt;
&lt;p&gt;So personally, I now have two levels of secure storage. First, there's the eCryptfs mount on my laptop I use for normal stuff. For more sensitive content that I can afford to have off-box, I use LUKS. &lt;/p&gt;</summary><category term="ecryptfs"></category><category term="luks"></category><category term="linux"></category><category term="encryption"></category><category term="security"></category><category term="privacy"></category></entry><entry><title>Directory Encryption with eCryptfs</title><link href="https://nekopy.github.io/ecryptfs.html" rel="alternate"></link><published>2017-03-10T21:24:05-08:00</published><author><name>neko.py</name></author><id>tag:nekopy.github.io,2017-03-10:ecryptfs.html</id><summary type="html">&lt;p&gt;A couple nights ago I decided to finally get some encryption up and running with eCryptfs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="eCryptfs Honey Badger Mascot" src="http://ecryptfs.org/img/big-honey-badger.png" /&gt;&lt;/p&gt;
&lt;p&gt;I have a buddy who's using GPG to do their encryption, however this wasnt really the right choice for me. The primary issue was that the GPG tools I was looking at tend to just deal with a single file. The recommended way of using GPG on folders is to tar them up and encrypt them. To me this approach is really annoying. I dont want to untar some files whenever I want to use them. So after some further digging I wound up coming across the recommendation of using eCryptfs. &lt;/p&gt;
&lt;p&gt;eCryptfs is, as the name suggests, actually an encrypted filesystem and abstraction layer. The way it works is by introducing a kernel module which handles mounting the encrypted files on disk, and decrypts/encrypts file I/O on the fly. This way, you never actually have files decrypted on disk. Judging from the files, you can even set it up to work on your swap space. &lt;/p&gt;
&lt;p&gt;The issue I have with it right now is that it's &lt;em&gt;slow&lt;/em&gt;. I'm trying to move some very large files, and it's grinding my laptop to a halt. As you might have seen in my other post, my laptop is relatively chunky. However, since this is overhead, I'm gonna give it the benefit of the doubt and finish moving the files to where I want them before I throw in the towel and try something else. But really, it hurt. I would have written this blog post on the 7th but the kernel module brought even vim to a halt. And since its in the kernel, I can't just hop in and set a good nice value...&lt;/p&gt;
&lt;p&gt;Anyway, to set it up, it's mega simple. You wanna grab ecryptfs-utils from your package repos. &lt;/p&gt;
&lt;p&gt;For me, in order to use them I needed to add myself to a new group called ecryptfs.&lt;/p&gt;
&lt;p&gt;Fun little trick I learned is that once you're in the group, you can get your system to honor the new group without needing to reboot by using the newgrp command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newgrp ecrypts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Good stuff. Now that we're all set there, we wanna use the default eCryptfs setup. You do this like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ecryptfs-setup-private
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is gonna get you all configured with some new juicy ecryptfs space in a folder called .Private in your home directory and it's going to automatically set up a mount which allows you to access the files in a folder called Private when you login. There's two passwords you set up. One is the normal login password. This should match your account password and will be used for decrypting the folder when you mount it at login time. The other is actually to be used for recovery in case your OS dies or whatever. You can recover ecryptfs stuff using ecryptfs-recover-private in case your OS gets fucked or something. &lt;/p&gt;
&lt;p&gt;So my next step was obviously to move all my private goodies like accounting records into my new Private folder. And after that, I obviously wanted to protect myself a little by shredding the files that I'd copied in. But there's a problem. I use ext4, which to my understanding is a journaling filesystem. This means that writes arent all done immediately. However, you can flush the journal buffer with the shell command sync. The shred man page says the following goodies:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CAUTION: Note that shred relies on a very important assumption: that the file system over‐
 writes data in place.  This is the traditional way to do things, but many modern file sys‐
 tem designs do not satisfy this assumption.  The following are examples of file systems on
 which shred is not effective, or is not guaranteed to be  effective  in  all  file  system
 modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;log-structured  or  journaled file systems, such as those supplied with AIX and Solaris (and JFS, ReiserFS, XFS, Ext3, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;file systems that write redundant data and carry on even if some writes  fail,  such  as RAID-based file systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;file systems that make snapshots, such as Network Appliance's NFS server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;file systems that cache in temporary locations, such as NFS version 3 clients&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compressed file systems&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In  the case of ext3 file systems, the above disclaimer applies (and shred is thus of lim‐
 ited effectiveness) only in data=journal mode, which journals file  data  in  addition  to
 just  metadata.   In both the data=ordered (default) and data=writeback modes, shred works
 as usual.  Ext3 journaling modes can be changed by adding the data=something option to the
 mount  options  for  a particular file system in the /etc/fstab file, as documented in the
 mount man page (man mount).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And there's a lot of internet paranoia on the same subject. However someone out there made a good point... A journaling filesystem will only journal for a little while. We can forcibly flush that using a sync. They proposed the following code which should flush the shred before deleting it. I wrapped it all up nice in a shell function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jshred&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        shred -v -n &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;
        sync
        shred -v -n &lt;span class="m"&gt;0&lt;/span&gt; -z -u &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is going to nuke the file with random garbage before deleting it. &lt;/p&gt;
&lt;p&gt;I've got a lot of crap to move into my encrypted folder and I wanna get to playing games tonight, so I think that's enough for one night.&lt;/p&gt;</summary><category term="ecryptfs"></category><category term="shred"></category><category term="linux"></category><category term="encryption"></category><category term="security"></category><category term="privacy"></category></entry><entry><title>Automatic Driver Building with DKMS</title><link href="https://nekopy.github.io/dkms.html" rel="alternate"></link><published>2017-03-04T01:51:00-08:00</published><author><name>neko.py</name></author><id>tag:nekopy.github.io,2017-03-03:dkms.html</id><summary type="html">&lt;p&gt;Moving to Fedora on my laptop has been a perpetual learning experience. About half a year ago my Windows install died and I wound up getting so mad I left for Fedora. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;           &lt;span class="s s-Atom"&gt;/:-------------:\&lt;/span&gt;          &lt;span class="s s-Atom"&gt;neko@&lt;/span&gt;&lt;span class="nf"&gt;catbox&lt;/span&gt;
        &lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;------------------::&lt;/span&gt;        &lt;span class="nv"&gt;OS&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Fedora&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="nv"&gt;TwentyFive&lt;/span&gt;
      &lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;----------/shhOHbmp---:\&lt;/span&gt;      &lt;span class="nv"&gt;Kernel&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;x86_64&lt;/span&gt; &lt;span class="nv"&gt;Linux&lt;/span&gt; &lt;span class="mf"&gt;4.9.12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;200.&lt;/span&gt;&lt;span class="s s-Atom"&gt;fc25&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;x86_64&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;/-----------omMMMNNNMMD&lt;/span&gt;  &lt;span class="s s-Atom"&gt;---:&lt;/span&gt;     &lt;span class="nv"&gt;Uptime&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s s-Atom"&gt;h&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="nf"&gt;m&lt;/span&gt;
   &lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;----------sMMMMNMNMP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;    &lt;span class="s s-Atom"&gt;---:&lt;/span&gt;    &lt;span class="nv"&gt;Packages&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2423&lt;/span&gt;
  &lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;----------:&lt;/span&gt;&lt;span class="nv"&gt;MMMdP&lt;/span&gt;&lt;span class="s s-Atom"&gt;-------&lt;/span&gt;    &lt;span class="s s-Atom"&gt;---\&lt;/span&gt;   &lt;span class="nv"&gt;Shell&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;zsh&lt;/span&gt; &lt;span class="mf"&gt;5.2&lt;/span&gt;
 &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;------------:&lt;/span&gt;&lt;span class="nv"&gt;MMMd&lt;/span&gt;&lt;span class="s s-Atom"&gt;--------&lt;/span&gt;    &lt;span class="s s-Atom"&gt;---:&lt;/span&gt;   &lt;span class="nv"&gt;Resolution&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="nf"&gt;x1080&lt;/span&gt;
 &lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;-----------:&lt;/span&gt;&lt;span class="nv"&gt;MMMd&lt;/span&gt;&lt;span class="s s-Atom"&gt;-------&lt;/span&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;---:&lt;/span&gt;   &lt;span class="nv"&gt;WM&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;i3&lt;/span&gt;
 &lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;---&lt;/span&gt;    &lt;span class="s s-Atom"&gt;oNMMMMMMMMMNho&lt;/span&gt;     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;----:&lt;/span&gt;   &lt;span class="nv"&gt;CPU&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Intel&lt;/span&gt; &lt;span class="nv"&gt;Core&lt;/span&gt; &lt;span class="s s-Atom"&gt;i7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4800&lt;/span&gt;&lt;span class="nv"&gt;MQ&lt;/span&gt; &lt;span class="nv"&gt;CPU&lt;/span&gt; &lt;span class="s s-Atom"&gt;@&lt;/span&gt; &lt;span class="mf"&gt;3.7&lt;/span&gt;&lt;span class="nv"&gt;GHz&lt;/span&gt;
 &lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s s-Atom"&gt;shhhMMMmhhy++&lt;/span&gt;   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;------/&lt;/span&gt;   &lt;span class="nv"&gt;GPU&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Gallium&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt; &lt;span class="s s-Atom"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;NVE6&lt;/span&gt;
 &lt;span class="p"&gt;:-&lt;/span&gt;    &lt;span class="s s-Atom"&gt;-------:&lt;/span&gt;&lt;span class="nv"&gt;MMMd&lt;/span&gt;&lt;span class="s s-Atom"&gt;--------------:&lt;/span&gt;    &lt;span class="nv"&gt;RAM&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1529&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;15970&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;
 &lt;span class="p"&gt;:-&lt;/span&gt;   &lt;span class="s s-Atom"&gt;--------/&lt;/span&gt;&lt;span class="nv"&gt;MMMd&lt;/span&gt;&lt;span class="s s-Atom"&gt;-------------&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="p"&gt;:-&lt;/span&gt;    &lt;span class="s s-Atom"&gt;------/hMMMy------------:&lt;/span&gt;     
 &lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s s-Atom"&gt;:dMNdhhdNMMNo------------&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
 &lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;--:&lt;/span&gt;&lt;span class="nf"&gt;sdNMMMMNds&lt;/span&gt;&lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;-----------:&lt;/span&gt;       
 &lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;-----:://:-------------::&lt;/span&gt;         
 &lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;--------------------://&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since then I've never looked back. I'm set up to dual-boot with windows, so I still have my games if need be. However one of the biggest issues I had was the incompatiblity of my internal wireless card with available drivers. Instead, I wound up buying myself a usb wireless adapter, which is a pretty mean motherfucker, but it needed me to build the kernel module from source. &lt;/p&gt;
&lt;p&gt;With fedora I get very frequent updates to my kernel, however, and this means very frequently I'll boot up and have no internet, because lo and behold, the kernel updated and I need to rebuild my driver. Oh and it doesnt play nice with NetworkManager either. I had to get down and dirty with nm-cli, but that's a story for another day.&lt;/p&gt;
&lt;p&gt;So today I finally sucked it up and learned how to use DKMS. What DKMS will do (and I always confuse it with DPKG) is automatically rebuild your kernel modules from source when the kernel upgrades.&lt;/p&gt;
&lt;p&gt;Setting it up was extremely simple. I followed a simple tutorial, with only slight modifications.&lt;/p&gt;
&lt;p&gt;First off, copy your kernel source to a new folder under /usr/src&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;su
mkdir /usr/src/rtl8814AU-4.3.21
cp -R ~/rtl8814AU/* /usr/src/rtl8814AU-4.3.21
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where the folder you make is in $(module-name)-$(module-version) format. Then we're gonna add a dkms.conf file at the top level of that folder, and fill it with the appropriate content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;PACKAGE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rtl8814AU&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;PACKAGE_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4.3.21&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;BUILT_MODULE_NAME[0]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8814au&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;DEST_MODULE_LOCATION[0]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/kernel/drivers/net/wireless/&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;MAKE[0]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;make -j12&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;AUTOINSTALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Probably the most interesting thing going on here is the value of the MAKE[0] key. This is the command that's gonna be called when DKMS enters your module directory to build up your stuff. In my case, the makefile already has everything it needs to build itself. (Except for two lines being backwards which broke DKMS building... in an 1800 line Makefile... took hours to isolate and fix). By default, DKMS will want to build your project with as many jobs as you have cores. Obviously, I know better than the DKMS authors, and the magic job number is 1.5 times the number of cores you have. In my case, that gives us -j12.&lt;/p&gt;
&lt;p&gt;Once all that's set, just add that sucker to DKMS with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dkms add -m rtl8814AU -v &lt;span class="m"&gt;4&lt;/span&gt;.3.21
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and test building...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dkms build -m rtl8814AU -v &lt;span class="m"&gt;4&lt;/span&gt;.3.21
dkms status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's about 2am now. Hopefully next time my kernel builds i wont be totally boned. I'll have to post here to update if I am.&lt;/p&gt;</summary><category term="DKMS"></category><category term="linux"></category><category term="kernel modules"></category><category term="Fedora"></category></entry><entry><title>Hello Internet</title><link href="https://nekopy.github.io/hello.html" rel="alternate"></link><published>2017-03-01T21:45:00-08:00</published><author><name>neko.py</name></author><id>tag:nekopy.github.io,2017-03-01:hello.html</id><summary type="html">&lt;p&gt;I plan on using this website to focus output of projects I've identified for myself. This includes various topics including programming, reverse engineering, computer miscellany and potentially electronics, depending on which topics I choose to pursue. &lt;/p&gt;
&lt;p&gt;At the time of writing, I'm a software engineer at a network security company. In my free time I work on game development and occasionally help with the Discord chatbot, Bakabot.&lt;/p&gt;
&lt;p&gt;Some upcoming plans include investigating claims that BetterDiscord steals user tokens, and an attempt to develop a Firefox plugin for ripping soundcloud content. &lt;/p&gt;
&lt;p&gt;Tonight I've been working mostly on configuring my pelican theme. At time of writing, I'm using the eevee theme, which is based on Google's material design philosophy. I tend to be a fan of the google material design look and feel but I'm not sure I'm sold on how it looks for a website. It's very... colorful despite being a minimal theme. My favorite colors tend to be mute earthy things and blues, but eevee insists on using non-hex values for the theme colors. I was hoping to emulate the colors of an espeon in order to continue the pokemon thing, but &lt;a href="https://getmdl.io/customize/index.html"&gt;the color picker eevee recommends use of&lt;/a&gt; is fairly limited. For whatever reason, pelican seems to want to use reStructured Text instead of the more common markdown by default, so many of the examples are painfully presented in rST. I expect markdown to continue to be the &lt;em&gt;lingua franca&lt;/em&gt; of rich text markup, so I'm going to stick with that. Plus it's what discord uses, and it's what Atlassian uses, and gamejolt... basically my whole life.&lt;/p&gt;
&lt;p&gt;Regardless of the text markup, most important to me is how well it can do code blocks, of course. Let's give it a shot...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This should be a python block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;and a c block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;And c++...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those look alright? They better or I'm going to have to move to something else.&lt;/p&gt;
&lt;p&gt;Well, after some quick learning, seems like pelican is lying through its gnarly bird teeth about how to do syntax highlighting in markdown. It's apparently the same as it is in Discord; three backticks, the name of the language, a return, then three more backticks:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;print("shit")&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Like this. Fortunately the &lt;a href="https://en.support.wordpress.com/markdown-quick-reference/"&gt;WordPress Markdown quick reference&lt;/a&gt; verified for me quickly that it's not just a nuance of discord.&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category></entry></feed>